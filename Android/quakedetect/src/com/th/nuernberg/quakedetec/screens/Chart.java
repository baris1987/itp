package com.th.nuernberg.quakedetec.screens;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Color;import android.graphics.Paint.Align;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.TextView;import com.th.nuernberg.quakedetec.R;import com.th.nuernberg.quakedetec.acceleration.AccelSample;import com.th.nuernberg.quakedetec.acceleration.Accelerometer;import org.achartengine.ChartFactory;import org.achartengine.GraphicalView;import org.achartengine.chart.PointStyle;import org.achartengine.model.XYMultipleSeriesDataset;import org.achartengine.model.XYSeries;import org.achartengine.renderer.XYMultipleSeriesRenderer;import org.achartengine.renderer.XYSeriesRenderer; public class Chart extends Fragment{	private final static int SAMPLE_SIZE = 50;	private GraphicalView view;	LinearLayout chartViewHolder;	private TextView tvX, tvY, tvZ, tvAbs;	private XYSeries[] xySeries;	private XYMultipleSeriesDataset dataset;	private XYMultipleSeriesRenderer renderer;	private int x = 0;	 private AccelerationBroadcastReceiver accelReceiver;    			@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {				View rootView = inflater.inflate(R.layout.chart, container,	false);		IntentFilter filter = new IntentFilter(Accelerometer.ACCEL_SAMPLE);		accelReceiver = new AccelerationBroadcastReceiver();		this.getActivity().registerReceiver(accelReceiver, filter);		dataset = new XYMultipleSeriesDataset();		renderer = new XYMultipleSeriesRenderer();		renderer = getRenderer();		xySeries = getXYSeries();		getXYSeriesRenderer();		initLayout(rootView);		return rootView;	}		@Override	public void onStop() {		if(accelReceiver != null)			this.getActivity().unregisterReceiver(accelReceiver);		super.onStop();	}	@Override	public void onResume() {		super.onResume();	}	@Override	public void onPause() {		super.onPause();	}	private void initLayout(View rootView) {		chartViewHolder = (LinearLayout) rootView.findViewById(R.id.chart);		view = ChartFactory.getTimeChartView(this.getActivity(), dataset,				renderer, "");		view.refreshDrawableState();		view.repaint();		chartViewHolder.addView(view);		tvX = (TextView) rootView.findViewById(R.id.tv_acc_x);		tvY = (TextView) rootView.findViewById(R.id.tv_acc_y);		tvZ = (TextView) rootView.findViewById(R.id.tv_acc_z);		tvAbs = (TextView) rootView.findViewById(R.id.tv_acc_abs);	}	private XYMultipleSeriesRenderer getRenderer() {		XYMultipleSeriesRenderer renderer = new XYMultipleSeriesRenderer();		renderer.setApplyBackgroundColor(true);		renderer.setBackgroundColor(Color.BLACK);		renderer.setMarginsColor(Color.BLACK);		renderer.setClickEnabled(false);		renderer.setExternalZoomEnabled(false);		renderer.setPanEnabled(false, false);		renderer.setYAxisMin(-50, 0);		renderer.setYAxisMax(50, 0);		renderer.setAntialiasing(true);		renderer.setShowLegend(false);		renderer.setYAxisAlign(Align.LEFT, 0);		renderer.setAxesColor(Color.WHITE);		return renderer;	}	private void getXYSeriesRenderer() {		// X axis		XYSeriesRenderer r = new XYSeriesRenderer();		r.setColor(getResources().getColor(R.color.chart_x));		r.setPointStyle(PointStyle.CIRCLE);		r.setFillPoints(true);		renderer.addSeriesRenderer(r);		// Y axis		r = new XYSeriesRenderer();		r.setPointStyle(PointStyle.CIRCLE);		r.setFillPoints(true);		r.setColor(getResources().getColor(R.color.chart_y));		renderer.addSeriesRenderer(r);		// Z axis		r = new XYSeriesRenderer();		r.setPointStyle(PointStyle.CIRCLE);		r.setFillPoints(true);		r.setColor(getResources().getColor(R.color.chart_z));		renderer.addSeriesRenderer(r);		// Abs axis		r = new XYSeriesRenderer();		r.setPointStyle(PointStyle.POINT);		r.setColor(getResources().getColor(R.color.chart_abs));		r.setLineWidth(3);		renderer.addSeriesRenderer(r);	}	private XYSeries[] getXYSeries() {		XYSeries[] series = new XYSeries[4];		series[0] = new XYSeries("X");		series[1] = new XYSeries("Y");		series[2] = new XYSeries("Z");		series[3] = new XYSeries("Abs");		dataset.addSeries(series[0]);		dataset.addSeries(series[1]);		dataset.addSeries(series[2]);		dataset.addSeries(series[3]);		return series;	}	private class AccelerationBroadcastReceiver extends BroadcastReceiver {		@Override		public void onReceive(Context context, Intent intent) {			if (intent.getAction().equals(Accelerometer.ACCEL_SAMPLE)) {				AccelSample sample = intent.getParcelableExtra(Accelerometer.ACCEL_SAMPLE_KEY);				if (sample != null) {					float abs = Math.abs(sample.x) + Math.abs(sample.y) + Math.abs(sample.z);					tvX.setText(String.format( "%.2f", sample.x));					tvY.setText(String.format( "%.2f", sample.y));					tvZ.setText(String.format( "%.2f", sample.z));					tvAbs.setText(String.format( "%.2f", abs));										if (xySeries[0].getItemCount() > SAMPLE_SIZE) {						xySeries[0].remove(0);						xySeries[1].remove(0);						xySeries[2].remove(0);						xySeries[3].remove(0);					}					xySeries[0].add(x, sample.x);					xySeries[1].add(x, sample.y);					xySeries[2].add(x, sample.z);					xySeries[3].add(x, abs);					x++;					view.repaint();				}			}		}	}		}